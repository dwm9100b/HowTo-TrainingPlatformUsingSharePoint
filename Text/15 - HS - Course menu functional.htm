<!-- HS - Course menu functional.htm -->
<div style='width: 650px; margin-top: 0px;'>

    <p style='margin-top: 0px;'>
        Now let's work on the functionality of the gallery menu.
    </p>

    <ol>
        <li>From the left Tree view menu, select galCourseMenu</li>
        <li>In the properties drop down, above Tree view</li>
        <li>Locate the <b>Items</b> property, replace with the following code<br>
            <pre><code><span style='color: #b54b8c;'>// This is tough code to explain, but here goes
// Our outer filter is on the entire cached course collection</span>
Filter(
    colAllCourses,

    <span style='color: #b54b8c;'>// Filters work by looping over rows of a collection
    // Filters also return a collection
    // If the number of rows returned equals the same number
    // of user selected filter tags, then the course row is shown</span>
    CountRows(

        <span style='color: #b54b8c;'>// Our inner filter loops over all the user selected filter
        // tags and checks to see if they are in the current course
        // row of the outer filter. It will return a collection of
        // all the matching terms</span>
        Filter(
            colFilterTags,

            <span style='color: #b54b8c;'>// Check to see if the current filter tag we are looping
            // over is part of the current course row of the outer filter
            // If it is found, it becomes part of the returned collection
            // for our CountRows</span>
            !IsBlank(
                LookUp(
                    TaxKeyword,
                    Label = colFilterTags[@Value]
                )
            )
        )
    ) = CountRows(colFilterTags)
)
<span style='color: #b54b8c;'>// End of the Items property code
</code></pre>
        </li>
        <li>Whew! Now off to another thats an even more of a beast.<br>
            In the properties drop down, go to the <b>OnSelect</b> property<br>
            Replace with the following code<br>
<pre><code><span style='color: #b54b8c;'>// Start of OnSelect code
// Get all the lessons from SharePoint, bring back selected columns
// Then we are adding a new column to the local lesson collection</span>
ClearCollect(colCourseLessons, 
    AddColumns(
        ShowColumns(
            Sort(
                Filter(
                    CourseLessons,
                    Course.Id = galCourseMenu.Selected.ID
                ),
                LessonId
            ),
            &quot;Course&quot;,
            &quot;LessonId&quot;,
            &quot;Time&quot;,
            &quot;Title&quot;,
            &quot;Content&quot;
        ),
        &quot;Completed&quot;,
        false
    )
);

<span style='color: #b54b8c;'>// Now lets get all the completed records for this
// course and user, again only need the 2 columns returned</span>
ClearCollect(colLessonsCompleted, 
    ShowColumns(
        Filter(
                LessonsCompleted,
                CourseId = galCourseMenu.Selected.ID,
                Student.Email = User().Email
        ),
        &quot;CourseId&quot;,
        &quot;LessonId&quot;
    )
);

<span style='color: #b54b8c;'>// If there is a completed record for a particular lesson
// Update the completed column we added to our local lesson collection</span>
UpdateIf(
    colCourseLessons,
    true,
    {
    Completed: 
        !IsBlank(
            LookUp(
                colLessonsCompleted,
                LessonId = colCourseLessons[@LessonId]
            )
        )
    }
);

<span style='color: #b54b8c;'>// Finally make sure we reset our lesson gallery (menu)
// then we navigate to the lesson screen!</span>
Reset(galLessonMenu);
Navigate('Lessons Screen',ScreenTransition.Fade);

<span style='color: #b54b8c;'>// End of the OnSelect property code
</code></pre>
        </li>
    </ol>
    <p>Note there will be an error on the Reset function, for now.</p>
    <p>That was a beast! Hopefully some of the functionality makes sense.</p>
</div>